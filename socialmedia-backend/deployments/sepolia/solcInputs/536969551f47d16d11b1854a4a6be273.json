{
  "language": "Solidity",
  "sources": {
    "contracts/Socialmedia.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nerror Socialmedia__userNameLenghtMustBeGreatherThanZero();\r\nerror Socialmedia__imageCdnLengthMustBeGreatherThanZero();\r\nerror Socialmedia__userNameIsAlreadyExist();\r\nerror Socialmedia__userNameIsNotExist();\r\nerror Socialmedia__notAnOwner();\r\nerror Socialmedia__notEnoughEthSended();\r\nerror Socialmedia__postOwnerCannotTiptheirPosts();\r\nerror Socialmedia__userCannotSendPostToTheSameAccount();\r\nerror Socialmedia__userDontHaveThePost();\r\nerror Socialmedia__ThereIsNoEthBalance();\r\nerror Socialmedia__TransactionFailed();\r\nerror Socialmedia__NoPostPosted();\r\nerror Socialmedia__PostisNotExist();\r\nerror Socialmedia__thisPostIsNotExist();\r\n\r\ncontract Socialmedia{\r\n    \r\n    User[] public s_users;\r\n    Post[] public s_allPosts;\r\n    uint256 public s_highlyTipedImageIndex;\r\n    mapping (bytes20 => uint256) public s_userNameToUserIndex;\r\n \r\n    uint256 public s_totalUsers;\r\n\r\n    struct User {\r\n        uint256 userId;\r\n        bytes20 userName;\r\n        address ownerAddress;\r\n        bytes profileImageUrl;\r\n        uint256 balanceEth;\r\n        uint256[] posts;\r\n        uint256 totalPosts;\r\n    }\r\n\r\n    struct Post {\r\n        uint256 postId;\r\n        uint256 postIndex;\r\n        uint256 userId;\r\n        bytes20 userName;\r\n        bytes postImageUrl;\r\n        uint256 tipedAmount;\r\n        bool isActive;\r\n        bytes20[] tipedUsers;\r\n        bytes20[] owners;\r\n    }  \r\n    \r\n\r\n\r\n    modifier checkIsValidUserName(string memory userName){\r\n        if(bytes(userName).length <=0){\r\n            revert Socialmedia__userNameLenghtMustBeGreatherThanZero();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkIsValidImageCdn(string memory imageUrl) {\r\n        if(bytes(imageUrl).length <= 0){\r\n            revert Socialmedia__imageCdnLengthMustBeGreatherThanZero();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkTheUserNameIsExists(uint256 userIndex){\r\n        if(userIndex == 0 || s_users[userIndex].userId != userIndex){\r\n            revert Socialmedia__userNameIsNotExist();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkIsOwner(uint256 userIndex){\r\n        if(s_users[userIndex].ownerAddress != msg.sender){\r\n            revert Socialmedia__notAnOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier checkSendrAndReciverBothAreSame(uint256 userId, uint256 postOwnerId){\r\n\r\n         if(userId == postOwnerId){\r\n            revert Socialmedia__postOwnerCannotTiptheirPosts();\r\n        }\r\n        _;\r\n    }   \r\n\r\n    //Events\r\n    event newUserSignup(uint256 indexed userId, string indexed  userName, string indexed  profileImage);\r\n    event profileImageChanged(uint256 indexed userId,   string indexed newProfileImageUrl);\r\n    event newPostAdded(uint256 indexed userId, string indexed postImageUr, uint256 indexed imageIndex);\r\n    event postTiped(uint256 indexed postOwnerId,uint256 indexed postId, uint256 indexed tipedAmount);\r\n    event PostDeleted(uint256 indexed userId, uint256 indexed  postId);\r\n    event postSended(uint256 indexed userId, uint256 indexed postReciverId);\r\n\r\n    event LogIterationIndex(uint256 index);\r\n\r\n\r\n\r\n    constructor() {\r\n        s_totalUsers = 1;\r\n        uint256[] memory tempPostArray;\r\n        User memory tempUser = User(0,bytes20(0), address(0), \"\", 0, tempPostArray, 0);\r\n       \r\n        s_users.push(tempUser);\r\n        s_allPosts.push(Post(0,0,0,bytes20(0), \"\", 0,false,new bytes20[](0), new bytes20[](0)));\r\n    }\r\n\r\n    //Auth\r\n\r\n    function signUp(string memory userName, string memory profileImageUrl) external checkIsValidUserName(userName) {\r\n        if(s_userNameToUserIndex[convertStringToBytes20(userName)] != 0){\r\n            revert Socialmedia__userNameIsAlreadyExist();\r\n        }\r\n        bytes20 userNameInBytes20 = convertStringToBytes20(userName);\r\n         uint256[] memory tempPostArray;\r\n        User memory tempUser = User(s_totalUsers, userNameInBytes20, msg.sender, bytes(profileImageUrl), 0, tempPostArray, 0);\r\n        s_users.push(tempUser);\r\n        s_userNameToUserIndex[userNameInBytes20] = s_totalUsers;\r\n        s_totalUsers++;\r\n        emit newUserSignup(s_totalUsers-1, userName, profileImageUrl);\r\n\r\n    }\r\n\r\n    function signIn(string memory userName) external view returns(User memory) {\r\n        bytes20 tempUserName = convertStringToBytes20(userName);\r\n        uint256 userIndex = s_userNameToUserIndex[tempUserName];\r\n        if(s_users[userIndex].ownerAddress != msg.sender){\r\n            revert Socialmedia__notAnOwner();\r\n        }\r\n        \r\n        if(s_users[userIndex].userId == 0){\r\n            revert Socialmedia__userNameIsNotExist();\r\n        }\r\n \r\n        return s_users[userIndex];\r\n    }\r\n\r\n    function changeProfileImage(uint256 userId,   string memory newProfileImageUrl) external checkIsOwner(userId) checkTheUserNameIsExists(userId) checkIsValidImageCdn(newProfileImageUrl) {\r\n        s_users[userId].profileImageUrl = bytes(newProfileImageUrl);\r\n        emit profileImageChanged(userId, newProfileImageUrl);\r\n    }\r\n\r\n    //Post\r\n\r\n    function addNewPost(uint256 userId,  string memory postImageUrl) external checkIsOwner(userId) checkTheUserNameIsExists(userId) checkIsValidImageCdn(postImageUrl) {\r\n        uint256 postId = s_allPosts.length;\r\n        uint256 postIndex = s_users[userId].posts.length;\r\n        Post memory tempPost = Post(postId, postIndex, userId,s_users[userId].userName, bytes(postImageUrl), 0, true, new bytes20[](0),   new bytes20[](1));\r\n        tempPost.owners[0] = s_users[userId].userName;\r\n        s_allPosts.push(tempPost);\r\n        s_users[userId].posts.push(postId);\r\n        s_users[userId].totalPosts += 1;\r\n        emit newPostAdded(userId, postImageUrl, postId);\r\n    }\r\n\r\n    function deletePost(uint256 userId, uint256 postId, uint256 postIndex) external checkIsOwner(userId) checkTheUserNameIsExists(userId) {\r\n        if(!s_allPosts[postId].isActive){\r\n            revert Socialmedia__userDontHaveThePost();\r\n        }    \r\n        s_allPosts[postId].isActive = false;\r\n        s_users[userId].posts[postIndex] = 0;\r\n        s_users[userId].totalPosts -= 1;\r\n        emit PostDeleted(userId, postId);\r\n    }\r\n\r\n    function tipPost(uint256 userId,uint256 postId, uint256 postOwnerId) external payable checkIsOwner(userId) checkTheUserNameIsExists(userId) checkTheUserNameIsExists(postOwnerId) checkSendrAndReciverBothAreSame(userId, postOwnerId)  {\r\n        if(msg.value <= 0){\r\n            revert Socialmedia__notEnoughEthSended();\r\n        }\r\n        if(!s_allPosts[postId].isActive){\r\n            revert Socialmedia__thisPostIsNotExist();\r\n        }\r\n        s_allPosts[postId].tipedAmount += msg.value;\r\n        s_users[postOwnerId].balanceEth += msg.value;\r\n        s_allPosts[postId].tipedUsers.push(s_users[userId].userName);\r\n        if(s_allPosts[postId].postId != s_allPosts[s_highlyTipedImageIndex].postId && s_allPosts[postId].tipedAmount > s_allPosts[s_highlyTipedImageIndex].tipedAmount){\r\n            s_highlyTipedImageIndex = postId;\r\n        }\r\n        emit postTiped(postOwnerId, postId, msg.value);\r\n    }\r\n\r\n    function sendPostToOtherUser(uint256 userId, uint256 postId, uint256 postIndex, string memory postReciverName) external checkIsOwner(userId) checkTheUserNameIsExists(userId)   {\r\n        if(!s_allPosts[postId].isActive){\r\n            revert Socialmedia__userDontHaveThePost();\r\n        }\r\n\r\n        uint256 postReciverId = s_userNameToUserIndex[convertStringToBytes20(postReciverName)];\r\n         if(postReciverId == 0 || s_users[postReciverId].userId != postReciverId){\r\n            revert Socialmedia__userNameIsNotExist();\r\n        }  \r\n\r\n         if(userId == postReciverId){\r\n            revert Socialmedia__userCannotSendPostToTheSameAccount();\r\n        }\r\n        s_users[postReciverId].posts.push(postId);\r\n        s_users[userId].posts[postIndex] = 0;\r\n        s_allPosts[postId].postIndex = s_users[postReciverId].posts.length-1;\r\n        s_allPosts[postId].userId = postReciverId;\r\n        s_allPosts[postId].userName = s_users[postReciverId].userName;\r\n        s_allPosts[postId].owners.push(s_users[postReciverId].userName);\r\n        s_users[userId].totalPosts -= 1;\r\n        s_users[postReciverId].totalPosts += 1;\r\n        emit postSended(userId, postReciverId);\r\n    }\r\n\r\n    function withdraw(uint256 userId) external checkIsOwner(userId) checkTheUserNameIsExists(userId){\r\n        if(s_users[userId].balanceEth <= 0){\r\n            revert Socialmedia__ThereIsNoEthBalance();\r\n        }\r\n        uint256 tempBalanceEth = s_users[userId].balanceEth;\r\n        s_users[userId].balanceEth -= s_users[userId].balanceEth;\r\n        (bool success,) = s_users[userId].ownerAddress.call{value: tempBalanceEth}(\"\");\r\n        if(!success){\r\n            revert Socialmedia__TransactionFailed();\r\n        }\r\n    }\r\n\r\n\r\n      function singleUser(uint256 requestUserId, string memory userName) external  view  checkIsValidUserName(userName) returns(User memory,Post[] memory, bool) {\r\n        bytes20 userNameInBytes = convertStringToBytes20(userName);\r\n        uint256 userIndex = s_userNameToUserIndex[userNameInBytes]; \r\n       \r\n        User memory tempUser = s_users[userIndex];\r\n        if(tempUser.totalPosts == 0){\r\n            return (tempUser,new Post[](0), tempUser.ownerAddress== msg.sender && s_users[requestUserId].userId == tempUser.userId);\r\n        }\r\n        Post[] memory tempPostArray = new Post[](10);\r\n        uint256 startIndex = tempUser.posts.length-1;\r\n        uint256 index=0;  \r\n        for(int  i= int(startIndex); i >= 0 && index < 10  ; i--) {\r\n            if(tempUser.posts[uint256(i)] != 0 && s_allPosts[tempUser.posts[uint256(i)]].isActive){\r\n                tempPostArray[index] = s_allPosts[tempUser.posts[uint256(i)]];\r\n                index++;\r\n            }               \r\n        }\r\n\r\n         assembly {\r\n        mstore(tempPostArray, index)\r\n    }\r\n        return(s_users[userIndex], tempPostArray, tempUser.ownerAddress== msg.sender && s_users[requestUserId].userId == tempUser.userId);\r\n    }\r\n    \r\n function getPosts(uint256 userId, uint256 startIndex) external view checkTheUserNameIsExists(userId) returns(Post[] memory){\r\n        User memory tempUser = s_users[userId];\r\n        if(tempUser.posts.length == 0){\r\n            return(new Post[](0));\r\n        }\r\n\r\n        Post[] memory tempPostArray = new Post[](10);\r\n\r\n        if(startIndex == 0 || startIndex > tempUser.totalPosts-1){\r\n            startIndex = tempUser.totalPosts-1;\r\n        }\r\n        uint256 index = 0;\r\n\r\n        for(int i = int(startIndex); i>= 0 && index < 10; i--){\r\n            if(s_allPosts[tempUser.posts[uint256(i)]].isActive){\r\n                tempPostArray[index] = s_allPosts[tempUser.posts[uint256(i)]];\r\n                index++;\r\n            }\r\n        }\r\n        assembly{\r\n            mstore(tempPostArray, index)\r\n        }\r\n        return tempPostArray;\r\n    }\r\n\r\n    function getPostByIndex(uint256 userId, uint256 index) external view checkTheUserNameIsExists(userId) returns(Post memory){\r\n        if(s_allPosts[index].isActive){\r\n            return s_allPosts[index];\r\n        }\r\n    }\r\n\r\n    function getAllPosts(uint256 postId,bool isFirstCall) external view returns(Post[] memory){\r\n         if(postId > s_allPosts.length){\r\n            revert Socialmedia__PostisNotExist();\r\n        }\r\n\r\n        if(postId == 0 && isFirstCall) {\r\n            postId = s_allPosts.length-1;\r\n        } \r\n       \r\n        Post[] memory tempPost = new Post[](10);\r\n        uint256 index = 0;\r\n        for(uint256 i = postId; i > 0 && index < 10 ; i--){\r\n            if(s_allPosts[i].isActive){\r\n                tempPost[index] = s_allPosts[i];\r\n                index++;\r\n            }\r\n        }\r\n        assembly{\r\n            mstore(tempPost , index)\r\n        }\r\n        return tempPost;\r\n    }\r\n\r\n    function getMostTipedImage()external view returns(Post memory) {\r\n        if(s_allPosts[s_highlyTipedImageIndex].postId != 0){\r\n            return s_allPosts[s_highlyTipedImageIndex];\r\n        }\r\n    }\r\n\r\n    function checkUserNameIsExist(string memory userName) external view returns(bool){\r\n        uint256 index = s_userNameToUserIndex[convertStringToBytes20(userName)];\r\n        if(index == 0) return false;\r\n        return true;\r\n    }\r\n\r\n \r\n\r\n    function convertStringToBytes20(string memory userName) private pure returns (bytes20 result) {\r\n        bytes memory userNameInBytes = bytes(userName);\r\n        assembly {\r\n            result:= mload(add(userNameInBytes, 32))\r\n        }\r\n    }\r\n    \r\n\r\n    fallback() external payable{}\r\n    receive() external payable{}\r\n\r\n}\r\n\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}